{"version":3,"sources":["components/Title/Title.js","components/FileConverter/subcomponents/UploadBox.js","components/FileConverter/subcomponents/DownloadBox.js","components/FileConverter/FileConverter.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["Title","UploadBox","props","imageProps","input","className","src","process","onClick","onClear","id","alt","disabled","type","accept","onChange","DownloadBox","output","file","FileConverter","state","name","handleFileChange","event","target","files","length","reader","FileReader","readAsDataURL","setState","replace","onload","e","this","result","bind","handleClearUpload","handleImageProcessing","imgElement","document","createElement","evt","canvas","resizeScale","width","height","ctx","getContext","drawImage","imgData","getImageData","srcEncoded","toDataURL","pixelData","data","wb","Excel","ws","addWorksheet","column","getColumn","row","getRow","row_id","cell_id","i","getCell","fill","pattern","fgColor","argb","intToHex","handleDownload","saveFile","number","hex","toString","fileName","workbook","a","xlsx","writeBuffer","base64","xls64","saveAs","Blob","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7e12c1ca.chunk.js","sourcesContent":["const Title = () => {\r\n    return (\r\n        <header>\r\n            <h1>Image Sheetifier</h1>\r\n            <h2>Transform your images into excel spreadsheets</h2>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\n\r\nimport './UploadBox.css';\r\n\r\nconst UploadBox = props => {\r\n\r\n    let imageProps = props.input ? \r\n        {\r\n            className: \"input-preview\",\r\n            src: props.input\r\n        } : \r\n        {\r\n            className: \"img-type-logo\",\r\n            src: process.env.PUBLIC_URL + '/IMG-file.svg'\r\n        };\r\n    \r\n    return(\r\n        <div className=\"box-wrapper\">\r\n            {props.input && <span className=\"close\" onClick={props.onClear}></span>}\r\n            <img id=\"input\" {... imageProps} alt=\"Input\"/>\r\n            <label id=\"upload\" className={props.input ? \"disabled\" : \"\"}> \r\n                <input \r\n                    disabled={!!props.input}\r\n                    type=\"file\"\r\n                    accept=\".jpg, .jpeg, .png\"\r\n                    onChange={props.onChange}/> \r\n                Upload\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UploadBox;","import React from 'react';\r\n\r\nimport './DownloadBox.css';\r\n\r\nconst DownloadBox = props => {\r\n\r\n    return(\r\n        <div className=\"box-wrapper\">\r\n            <img id=\"excel\" className=\"img-type-logo\" src={props.output ? props.output : process.env.PUBLIC_URL + '/XLSX-file.svg'} alt=\"Input\"/>\r\n            <label id=\"download\" className={props.file ? \"\" : \"disabled\"}> \r\n                <button\r\n                    disabled={!props.file}\r\n                    onClick={props.onClick}/> \r\n                Download\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DownloadBox;","import React, {Component} from 'react';\r\nimport * as Excel from 'exceljs';\r\nimport { saveAs } from 'file-saver';\r\n\r\nimport UploadBox from './subcomponents/UploadBox';\r\nimport DownloadBox from './subcomponents/DownloadBox';\r\n\r\nimport \"./FileConverter.css\";\r\n\r\nclass FileConverter extends Component {\r\n\t\r\n\tstate = {\r\n\t\tinput: null,\r\n\t\toutput: null,\r\n\t\tfile: null,\r\n\t\tname: null\r\n\t};\r\n\r\n\t/** upload image function */\r\n\thandleFileChange = event => {\r\n\r\n\t\t/** if no files, clear state and return */\r\n\t\tif(event.target.files.length === 0){\r\n\t\t\tthis.handleClearUpload();\r\n\t\t\treturn;\r\n\t\t} \r\n\r\n\t\tconst reader = new FileReader();\r\n\r\n\t\t/** get image as base64 */\r\n\t\treader.readAsDataURL(event.target.files[0]);\r\n\t\t/** save name in state so we can reference it when exporting the excel file */\r\n\t\tthis.setState({name: event.target.files[0].name.replace(/\\.[^/.]+$/, \"\")});\r\n\t\t\r\n\t\t/** save input image on state */\r\n\t\treader.onload = function(e) {\r\n\t\t\tthis.setState({input: e.target.result});\r\n\t\t}.bind(this);\r\n\t}\r\n\r\n\t/** Clear all state */\r\n\thandleClearUpload = () => {\r\n\t\tthis.setState({\tinput: null,\r\n\t\t\t\t\t\toutput: null,\r\n\t\t\t\t\t\tfile: null,\r\n\t\t\t\t\t\tname: null});\r\n\t}\r\n\r\n\thandleImageProcessing = () => {\r\n\t\tconst { input } = this.state;\r\n\t\t\r\n\t\t/** checking for empty files */\r\n\t\tif (!input) return;\r\n\t\t\r\n\t\t/** create an image element with the uploaded file */\r\n\t\tconst imgElement = document.createElement(\"img\");\r\n\t\timgElement.src = input;\r\n\r\n\t\t/** when the image loads... */\r\n\t\timgElement.onload = function(evt){\r\n\t\t\t\r\n\t\t\t/** create a canvas with the resized with and height */\r\n\t\t\tconst canvas = document.createElement(\"canvas\");\r\n\t\t\tconst MAX_WIDTH = 100;\r\n\t\t\tconst resizeScale = MAX_WIDTH / evt.target.width;\r\n\t\t\tcanvas.width = MAX_WIDTH;\r\n\t\t\tcanvas.height = evt.target.height * resizeScale;\r\n\t\t\t\r\n\t\t\t/** draw the uploaded image onto the resized canvas */\r\n\t\t\tconst ctx = canvas.getContext(\"2d\");\r\n\t\t\tctx.drawImage(evt.target,0,0,canvas.width,canvas.height);\r\n\t\t\t\r\n\t\t\t/** get resized image data */\r\n\t\t\tconst imgData = ctx.getImageData(0,0,canvas.width,canvas.height);\r\n\t\t\tconst srcEncoded = ctx.canvas.toDataURL(evt.target, \"image/jpeg\");\r\n\t\t\tconst pixelData = imgData.data;\r\n\r\n\t\t\t/** create a new excel file */\r\n\t\t\tlet wb = new Excel.Workbook();\r\n\t\t\tlet ws = wb.addWorksheet('sheet');\r\n\t\t\t\r\n\t\t\t/** resize columns so the cells look more like pixels */\r\n\t\t\tfor (let column = 1; column <= 100; column++) {\r\n\t\t\t\tws.getColumn(column).width = 3;\r\n\t\t\t}\r\n\r\n\t\t\tlet row = ws.getRow(1);;\r\n\t\t\tlet row_id = 1;\r\n\t\t\tlet cell_id = 1;\r\n\t\t\tfor (let i = 0; i < pixelData.length; i = i + 4){\r\n\t\t\t\t/** for each pixel in the image, assign it's argb values to the appropriate cell in the table */\r\n\t\t\t\trow.getCell(cell_id).fill = {\r\n\t\t\t\t\ttype: 'pattern',\r\n\t\t\t\t\tpattern:'solid',\r\n\t\t\t\t\tfgColor:{\r\n\t\t\t\t\t\targb: \r\n\t\t\t\t\t\t\tthis.intToHex(pixelData[i + 3]) +\r\n\t\t\t\t\t\t\tthis.intToHex(pixelData[i]) +\r\n\t\t\t\t\t\t\tthis.intToHex(pixelData[i + 1]) +\r\n\t\t\t\t\t\t\tthis.intToHex(pixelData[i + 2])},\r\n\t\t\t\t};\r\n\t\t\t\tif(cell_id === 100){\r\n\t\t\t\t\tcell_id = 1;\r\n\t\t\t\t\trow_id++;\r\n\t\t\t\t\trow = ws.getRow(row_id);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tcell_id++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t/** save output and file data in state */\r\n\t\t\tthis.setState({output: srcEncoded, file: wb})\r\n\t\t\t\r\n\t\t}.bind(this);\r\n\t}\r\n\r\n\t/** save excel file with the original image name */\r\n\thandleDownload = () => {\r\n\t\tconst { file, name } = this.state;\r\n\t\tthis.saveFile(name, file);\r\n\t}\r\n\r\n\t/** convert a number value to a hex based string (padding out the 0s) */\r\n\tintToHex(number){\r\n\t\tlet hex = number.toString(16);\r\n\t\twhile (hex.length < 2) hex = '0' + hex;\r\n\t\treturn hex;\r\n\t}\r\n\r\n\t/** helper function for saving the excel file */\r\n\tasync saveFile (fileName, workbook) {\r\n\t\tconst xls64 = await workbook.xlsx.writeBuffer({ base64: true })\r\n\t\tsaveAs(\r\n\t\t  new Blob([xls64], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' }),\r\n\t\t  fileName\r\n\t\t)\r\n\t  }\r\n\r\n    render() {\r\n        const {input, output, file} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"converter-container\">\r\n                    <section className=\"uploader\">\r\n\t\t\t\t\t\t<UploadBox input={input} onChange={this.handleFileChange} onClear={this.handleClearUpload}/>\r\n                    </section>\r\n                    <section className=\"downloader\">\r\n                        <DownloadBox output={output} file={file} onClick={this.handleDownload}/>\r\n                    </section>\r\n\t\t\t\t\t<button id=\"process\" className={(!input || !!file) ? \"disabled\": \"\"} disabled={(!input || !!file)} onClick={this.handleImageProcessing}>Process</button>  \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FileConverter;","import React, {Component} from 'react';\n\nimport Title from '../Title/Title';\nimport FileConverter from '../FileConverter/FileConverter';\n\nimport './App.css';\n\nclass App extends Component {\n\n\trender() {\n\t\t\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"App-wrapper\">\n\t\t\t\t\t<Title />\n\t\t\t\t\t<FileConverter />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t);\n\t}\n}\n\t\nexport default App;\n\t","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}